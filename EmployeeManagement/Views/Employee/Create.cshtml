@model EntityLayer.Employee

@{
    ViewBag.Title = "Create";

}

<h2>Create</h2>






@using (Html.BeginForm("Create", "Employee", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PanNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PanNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PanNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PassportNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PassportNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PassportNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="date" name="DateOfBirth" required="required" class="form-control" id="dob" />
                @*@Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control datepicker" } })*@
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger", id = "lblErrorDate" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfJoinee, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="date" name="DateOfJoinee" required="required" class="form-control" id="doj" />
                @*@Html.EditorFor(model => model.DateOfJoinee, new { htmlAttributes = new { @class = "form-control datepicker" } })*@
                @Html.ValidationMessageFor(model => model.DateOfJoinee, "", new { @class = "text-danger", id = "lblJoiningErrorDate" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Country.CountryName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @if (ViewBag.CountryList != null)
                {
                    @Html.DropDownListFor(model => model.CountryId, ViewBag.countryList as SelectList, "--- Select Country ---", new { @class = "form-control loder" })
                }

                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })

                <div onclick="LoderCall()" id="ajaxCall" style="display:none;">  </div>
            </div>


        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State.StateName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @if (ViewBag.CountryList != null)
                {
                    @Html.DropDownListFor(model => model.StateId, new SelectList(""), "--- Select States ---", new { @class = "form-control loder" })
                }

                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                <div onclick="LoderCall()" id="ajaxCall" style="display:none;">  </div>
            </div>

        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.City.CityName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @if (ViewBag.CountryList != null)
                {
                    @Html.DropDownListFor(model => model.CityId, new SelectList(""), "--- Select city ---", new { @class = "form-control loder" })
                }

                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                <div onclick="LoderCall()" id="ajaxCall" style="display:none;">  </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProfileImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">


                <input type="file" name="ImageFile" id="ImageFile" required class="btn btn-primary" />
                @TempData["ErrorMessage"]
                @Html.ValidationMessageFor(model => model.ProfileImage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                Male
                @Html.RadioButtonFor(model => model.Gender, "Male")
                Female
                @Html.RadioButtonFor(model => model.Gender, "Female")
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>

        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @*@Html.CheckBoxFor(model => model.IsActive,  new { @readonly = "readonly" });*@
                    @*@Html.CheckBoxFor(model => model.IsActive, new { htmlAttributes = new { @readonly = "readonly" } })*@

                    <input type="checkbox" id="IsActive" name="IsActive" value="true" checked="checked">

                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />|
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-warning" })
            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>


    // ajax call for loder
    function LoderCall() {
        debugger;
        $.ajax({
            type: "GET",
            url: "/Employee/CallingAjaxFunction",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (recData) {
                //debugger;
                //alert('Success');
            },
            error: function () { alert('A error'); }
        });
    }






    $(document).ready(function () {




        debugger;


 




        //------ 2nd way ------------------------
        $("#dob").change(function () {
            var dobString = $("#dob").val();
            var parts = dobString.split("-");
            var dtDOB = new Date(parts[1] + "-" + parts[0] + "-" + parts[2]);
            var part = parts[0];
            var dtCurrent = new Date();
            var years = dtCurrent.getFullYear() - part;
            if (years < 21) {
                $("#dob").val("");
                $("#lblErrorDate").html("Age must be Grater than 21 year.")
            }
            else
                $("#lblErrorDate").text("");
        })


        $("#doj").change(function () {
            debugger;
            var dobString = $("#dob").val();
            var partsDOB = dobString.split("-");
            var partDob = partsDOB[0];

            var dobString1 = $("#doj").val();
            var partsDOJ = dobString1.split("-");
            var partDay = partsDOJ[2];
            var partMonth = partsDOJ[1];
            var partYear = partsDOJ[0];

            var dtCurrent = new Date();

            var day = dtCurrent.getDate();
            var month = dtCurrent.getMonth();
            var year = dtCurrent.getFullYear();

            if (partYear >= year && partMonth >= month && partDay > day) {

                $("#doj").val("");
                $("#lblJoiningErrorDate").html("Date greater than today's Date is not allowed")
            }
            else {
                $("#lblJoiningErrorDate").text("");
            }
        })

        //------------------------------------------------------------------------
        $("#CountryId").change(function () {

            debugger;
            LoderCall();
            var cId = $(this).val();
            $.ajax({
                type: "post",
                url: "/Employee/StateList?CountryId=" + cId,
                contentType: "html",
                success: function (response) {
                    debugger;

                    $("#StateId").empty();
                    $("#CityId").empty();
                    $("#CityId").append('<option value=""> ---Select City--- </option>')
                    $("#StateId").append(response);

                },

            })
        });


        $("#StateId").change(function () {
            LoderCall();
            var sId = $(this).val();
            //debugger;

            $.ajax({
                type: "post",
                url: "/Employee/CityList?StateId=" + sId,
                contentType: "html",
                success: function (response) {
                    debugger;

                    $("#CityId").empty();
                    $("#CityId").append(response);
                },
            })
        });





        $("#ImageFile").change(function () {
            debugger;
            if (this.files[0].size > 2000000) {
                alert("Please upload file less than 2MB. Thanks!!");
                $(this).val('');
            }
        });

    });



    $('#PanNumber, #PassportNumber').keyup(function () {
        $(this).val($(this).val().toUpperCase());
    });
</script>
